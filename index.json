{
  "api/PTIRelianceLib.PTIException.html": {
    "href": "api/PTIRelianceLib.PTIException.html",
    "title": "Class PTIException",
    "keywords": "Class PTIException The root of all exception classes in PTIRelianceLib. For convenience, you may wrap library calls with a catcher for this class. using(var printer = new ReliancePrinter()) { try { printer.FlashUpdateTarget(myFirmware, myReporter); } catch(PTIException ex) { Console.WriteLine(ex.Message); } } Inheritance System.Object PTIException Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public class PTIException : Exception Constructors | Improve this Doc View Source PTIException(String, Object[]) Creates a new excception using convenience formatters Declaration public PTIException(string fmt, params object[] args) Parameters Type Name Description System.String fmt Format string System.Object [] args 0 or more args for format string"
  },
  "api/PTIRelianceLib.Protocol.TicketStates.html": {
    "href": "api/PTIRelianceLib.Protocol.TicketStates.html",
    "title": "Enum TicketStates",
    "keywords": "Enum TicketStates Translates ticket state byte to a state Namespace : PTIRelianceLib.Protocol Assembly : PTIRelianceLib.dll Syntax public enum TicketStates : int Fields Name Description Idle Printer is sitting idle Presented Paper is sitting at presenter Printing Printer is printing Unknown We don't know the state of the printer Unpresented Printer is moving paper towards presenter"
  },
  "api/PTIRelianceLib.Protocol.ErrorStatuses.html": {
    "href": "api/PTIRelianceLib.Protocol.ErrorStatuses.html",
    "title": "Enum ErrorStatuses",
    "keywords": "Enum ErrorStatuses Translates error byte to status Namespace : PTIRelianceLib.Protocol Assembly : PTIRelianceLib.dll Syntax public enum ErrorStatuses : byte Fields Name Description CorruptFirmware Reserved Cutter Cutter blade cannot move freely Jammed Printer is jammed OverHeated Printer is overheated PlatenOpen Printer lid (and by extension, head) are open Unknown Printer is reporting an unknown error VoltageHigh Printer is has too much voltage applied VoltageLow Printer has too little voltage applied"
  },
  "api/PTIRelianceLib.LibraryOptions.html": {
    "href": "api/PTIRelianceLib.LibraryOptions.html",
    "title": "Class LibraryOptions",
    "keywords": "Class LibraryOptions Configurable Library settings for compatibility with non-standard configurations. Inheritance System.Object LibraryOptions Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public class LibraryOptions : object Properties | Improve this Doc View Source Default Returns the default library options for this library. Declaration public static LibraryOptions Default { get; } Property Value Type Description LibraryOptions | Improve this Doc View Source DockerLinuxStretch Returns the library options that work well for Debian Stretch Docker images Declaration public static LibraryOptions DockerLinuxStretch { get; } Property Value Type Description LibraryOptions | Improve this Doc View Source HidCleanupDelayMs Gets or Sets the delay in milliseconds to block for after closing and cleaning up after an HID port. This primarily affects reboot calls during the flash update process. Default: 0 ms Declaration public int HidCleanupDelayMs { get; set; } Property Value Type Description System.Int32 Integer delay in milliseconds | Improve this Doc View Source HidFlushStructuresOnEnumError When true, if HID enumeration returns no results, flush the HID data structures (effectively forcing a device event loop poll) and delay HidCleanupDelayMs ms before returning. This does not fix the current enumeration but the next call to enumeration will have fresh device data. This primarily affects reboot calls during the flash update process. Default: false Declaration public bool HidFlushStructuresOnEnumError { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source HidReconnectDelayMs Gets or Sets the delay in millisecond that is used during Hid reconnection attempts. For devices with slow/no device event loops this has no effect. Instead, set HidFlushStructuresOnEnumError to make sure that fresh HID devices are getting discovered on enumeration. Default: 1000 Declaration public int HidReconnectDelayMs { get; set; } Property Value Type Description System.Int32"
  },
  "api/PTIRelianceLib.IPyramidDevice.html": {
    "href": "api/PTIRelianceLib.IPyramidDevice.html",
    "title": "Interface IPyramidDevice",
    "keywords": "Interface IPyramidDevice IPyramidDevice is a contract defining what actions all Pyramid products in this library will support. These devices own their own communication source and can be used in MVC binding patterns which is why they are marked IDisposable/>. Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public interface IPyramidDevice : IDisposable Methods | Improve this Doc View Source FlashUpdateTarget(BinaryFile, ProgressMonitor) Install the specified firmware BinaryFile on this device. With few exceptions, most any firmware can be installed using this method. The reporter ProgressMonitor provides callbacks for messages, progress, and errors. Declaration ReturnCodes FlashUpdateTarget(BinaryFile firmware, ProgressMonitor reporter) Parameters Type Name Description BinaryFile firmware Firmware image data ProgressMonitor reporter Progress callback instance Returns Type Description ReturnCodes Okay when update is successful Another ReturnCodes if update fails | Improve this Doc View Source GetFirmwareRevision() Returns the firmware Revlev of this device. If there is an error reading the firmware revision, a Revlev of 0.0.0 will instead be returned. Declaration Revlev GetFirmwareRevision() Returns Type Description Revlev Revision | Improve this Doc View Source GetSerialNumber() Returns the serial number for this device Declaration string GetSerialNumber() Returns Type Description System.String 9-digit serial number string when successful An empty string on failure | Improve this Doc View Source Ping() Ping returns Okay if the device is online and not in the middle of critical work. Declaration ReturnCodes Ping() Returns Type Description ReturnCodes Okay when device is online and ready ExecutionFailure if device is offline or busy | Improve this Doc View Source ReadConfiguration() Reads current configuration from this device and returns result as a JSON BinaryFile If there is an error reading the configuration, an empty BinaryFile is returned. You can check for an empty result via Empty . A configuration is a JSON formatted file that contains settings like baud rate, paper width, and print quality. Declaration BinaryFile ReadConfiguration() Returns Type Description BinaryFile BinaryFile | Improve this Doc View Source Reboot() Immediately reboots this device, taking care to handle any required port disconnection and reconnection details. Declaration ReturnCodes Reboot() Returns Type Description ReturnCodes Okay when update is successful Other ReturnCodes if update fails | Improve this Doc View Source SendConfiguration(BinaryFile) Writes the configuration BinaryFile specified by config to this device. The configuration is a JSON file describing the configuration to apply. Any fields omitted from the configuration file will be set to its default value. There are two ways to obtain a JSON configuration file. Using Reliance Tools for PC you may click File->Save Config. This will produce a valid JSON configuration of the attached printer. https://pyramidacceptors.com/app/reliance-tools/ Use ReadConfiguration() to get a configuration file. Declaration ReturnCodes SendConfiguration(BinaryFile config) Parameters Type Name Description BinaryFile config Confguration to apply Returns Type Description ReturnCodes Okay when configuration is successful Other ReturnCodes if configuration fails"
  },
  "api/PTIRelianceLib.Firmware.FlashProgressEventArgs.html": {
    "href": "api/PTIRelianceLib.Firmware.FlashProgressEventArgs.html",
    "title": "Class FlashProgressEventArgs",
    "keywords": "Class FlashProgressEventArgs Flash event used throughout this library Inheritance System.Object FlashProgressEventArgs Namespace : PTIRelianceLib.Firmware Assembly : PTIRelianceLib.dll Syntax public class FlashProgressEventArgs : System.EventArgs Constructors | Improve this Doc View Source FlashProgressEventArgs(Double) Construct new progress event from progress . Declaration public FlashProgressEventArgs(double progress) Parameters Type Name Description System.Double progress Value to report Fields | Improve this Doc View Source Progress Progress that was reported ranges (0,1.0) Declaration public readonly double Progress Field Value Type Description System.Double Progress value"
  },
  "api/PTIRelianceLib.Firmware.FlashEventMessageArgs.html": {
    "href": "api/PTIRelianceLib.Firmware.FlashEventMessageArgs.html",
    "title": "Class FlashEventMessageArgs",
    "keywords": "Class FlashEventMessageArgs Flash event used throughout this library Inheritance System.Object FlashEventMessageArgs Namespace : PTIRelianceLib.Firmware Assembly : PTIRelianceLib.dll Syntax public class FlashEventMessageArgs : System.EventArgs Constructors | Improve this Doc View Source FlashEventMessageArgs(String) Construct new event from message Declaration public FlashEventMessageArgs(string message) Parameters Type Name Description System.String message Message to encapsulate Fields | Improve this Doc View Source Message Flash event message contents. Declaration public readonly string Message Field Value Type Description System.String Message contents"
  },
  "api/PTIRelianceLib.BinaryFile.html": {
    "href": "api/PTIRelianceLib.BinaryFile.html",
    "title": "Class BinaryFile",
    "keywords": "Class BinaryFile A convenience wrapper for arbitrary data. This is a reusable, read-only wrapper around the original file that is used throughout this library. A BinaryFile can be created using the static builder methods From(String) or From(Byte[]) . Once a BinaryFile has been created, the contents cannot be changed. Inheritance System.Object BinaryFile Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public sealed class BinaryFile : object Properties | Improve this Doc View Source Empty Returns true if this BinaryFile is empty Declaration public bool Empty { get; } Property Value Type Description System.Boolean True if no data is in this BinaryFile | Improve this Doc View Source Item[Int32] Read-only indexer Declaration public byte this[int key] { get; } Parameters Type Name Description System.Int32 key Index to read Property Value Type Description System.Byte byte value at index key | Improve this Doc View Source Length Returns the length in bytes of this file Declaration public int Length { get; } Property Value Type Description System.Int32 Integer length of data in this BinaryFile in bytes | Improve this Doc View Source LongLength Returns the length in bytes of this file Declaration public long LongLength { get; } Property Value Type Description System.Int64 Long length of data in this BinaryFile in bytes Methods | Improve this Doc View Source From(Byte[]) Construct a BinaryFile from a buffer in memory. Declaration public static BinaryFile From(byte[] buffer) Parameters Type Name Description System.Byte [] buffer Memory to copy into a new BinaryFile Returns Type Description BinaryFile BinaryFile | Improve this Doc View Source From(String) Construct a BinaryFile from a physical file location at path . Declaration public static BinaryFile From(string path) Parameters Type Name Description System.String path Path to source file Returns Type Description BinaryFile BinaryFile contains data from path . If the file cannot be read, the result will be empty. | Improve this Doc View Source GetData() Returns a copy of this data Declaration public byte[] GetData() Returns Type Description System.Byte [] byte[]"
  },
  "api/PTIRelianceLib.html": {
    "href": "api/PTIRelianceLib.html",
    "title": "Namespace PTIRelianceLib",
    "keywords": "Namespace PTIRelianceLib Classes BinaryFile A convenience wrapper for arbitrary data. This is a reusable, read-only wrapper around the original file that is used throughout this library. A BinaryFile can be created using the static builder methods From(String) or From(Byte[]) . Once a BinaryFile has been created, the contents cannot be changed. DevNullMonitor As the name implies, this consumes and ignores all data passed to it. This is useful for silent console flash updaters, particularly on systems where constance console drawing may be expensive. Library Contains library metadata and configurables LibraryOptions Configurable Library settings for compatibility with non-standard configurations. ProgressMonitor An event container class specialized for flash update workers. PTIException The root of all exception classes in PTIRelianceLib. For convenience, you may wrap library calls with a catcher for this class. using(var printer = new ReliancePrinter()) { try { printer.FlashUpdateTarget(myFirmware, myReporter); } catch(PTIException ex) { Console.WriteLine(ex.Message); } } ReliancePrinter Reliance Thermal Printer class provides access access to flash updating, configuration, status reporting, and other commands. For best results, we recommend testing against the latest available firmware for Reliance. Use Reliance Tools for PC to update your printer to the latest firmware through the auto update feature. You may also contact our support team to get the latest firmware file at mailto:support@pyramidacceptors.com Reliance Tools for PC https://pyramidacceptors.com/app/reliance-tools/ Revlev Standard IPyramidDevice revision descriptor. A revision can be compared using fluent comparison operations such as Equals, Less Than, Greater Than, etc. Older firmware is considerd \"less than\" newer firmware using semantic versioning rules. 0.0.0 is an invalid firmware revision and is used as the default \"invalid\" revision. Status Printer status data include metrics about temperature sensors, and paper movement. TEST ... var status = printer. GetStatus() ; Console.WriteLine(\"Printer is: {0}\", status.TicketStatus); Console.WriteLine(\"Printer Errors: {0}\", status.PrinterErrors); ... Interfaces IPyramidDevice IPyramidDevice is a contract defining what actions all Pyramid products in this library will support. These devices own their own communication source and can be used in MVC binding patterns which is why they are marked IDisposable/>. Enums ReturnCodes Common return codes generated by this library"
  },
  "api/PTIRelianceLib.Protocol.html": {
    "href": "api/PTIRelianceLib.Protocol.html",
    "title": "Namespace PTIRelianceLib.Protocol",
    "keywords": "Namespace PTIRelianceLib.Protocol Enums ErrorStatuses Translates error byte to status SensorStatuses Translates status byte to sensor status TicketStates Translates ticket state byte to a state"
  },
  "api/PTIRelianceLib.Protocol.SensorStatuses.html": {
    "href": "api/PTIRelianceLib.Protocol.SensorStatuses.html",
    "title": "Enum SensorStatuses",
    "keywords": "Enum SensorStatuses Translates status byte to sensor status Namespace : PTIRelianceLib.Protocol Assembly : PTIRelianceLib.dll Syntax public enum SensorStatuses : byte Fields Name Description Arm 0 = No paper on arm 1 = Paper detected on arm Cutter 0 = cutter not home 1 = cutter home Notch 0 = No notch detected 1 = Notch detected Paper 0 = No paper at path 1 = Paper Present at path Path 0 = No paper in path 1 = Paper Present in path Platen 0 = platen off 1 = platen on Presenter 0 = No paper at presenter 1 = Paper Present at presenter Tach 0 = Tach error 1 = Tach OK"
  },
  "api/PTIRelianceLib.DevNullMonitor.html": {
    "href": "api/PTIRelianceLib.DevNullMonitor.html",
    "title": "Class DevNullMonitor",
    "keywords": "Class DevNullMonitor As the name implies, this consumes and ignores all data passed to it. This is useful for silent console flash updaters, particularly on systems where constance console drawing may be expensive. Inheritance System.Object ProgressMonitor DevNullMonitor Inherited Members ProgressMonitor.OnFlashProgressUpdated ProgressMonitor.OnFlashMessage ProgressMonitor.ReportFailure(String, Object[]) ProgressMonitor.ReportMessage(String, Object[]) ProgressMonitor.ReportProgress(Double) Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public class DevNullMonitor : ProgressMonitor, IProgressMonitor"
  },
  "api/PTIRelianceLib.Firmware.html": {
    "href": "api/PTIRelianceLib.Firmware.html",
    "title": "Namespace PTIRelianceLib.Firmware",
    "keywords": "Namespace PTIRelianceLib.Firmware Classes FlashEventMessageArgs Flash event used throughout this library FlashProgressEventArgs Flash event used throughout this library"
  },
  "api/PTIRelianceLib.ReturnCodes.html": {
    "href": "api/PTIRelianceLib.ReturnCodes.html",
    "title": "Enum ReturnCodes",
    "keywords": "Enum ReturnCodes Common return codes generated by this library Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public enum ReturnCodes : int Fields Name Description ConfigFileInvalid The specified configuration file is invalid. Use Reliance Tools to generate a valid configuration. DeviceNotConnected No IPyramidDevice is connected to the system ExecutionFailure Operation was started with the target but the response code from the target indicates failure. FailedBootloaderEntry An attmept to enter bootloader mode failed. Reboot the printer and try again if you receive this response. FlashChecksumMismatch The flash operation completed but the checksum is incorrect. Try flash updating again. FlashFileInvalid The specified firmware file is corrupt FlashInstalledFwNotSupported The target device has firmware that is not compatible with this library FlashPermissionDenied The target printer is denying your update request InvalidRequest The format of the request is invalid InvalidRequestPayload The request is known but the payload is malformed Okay Operation completed normally, printer is online and ready for work OperationAborted Operation was aborted by library due to sanity check failure RebootFailure An attempt to reboot the printer resulted in the connection not recovering. Try to reconnect to the printer again if you receive this response. TargetStoppedResponding The target was communicating normally and then unexpectedly stopped"
  },
  "tutorials/status_check.html": {
    "href": "tutorials/status_check.html",
    "title": "Checking Printer Status",
    "keywords": "Checking Printer Status Your Reliance printer can report errors in a number ways. This tutorial demonstrates how to use the method built into this library. It is easier to use that the ESC/POS version and is not OS-depdendent like the C++ version . Code Sample using System; using PTIRelianceLib; namespace reliance_sample { class Program { static void Main(string[] args) { // Wrap our printer in using so it gets disposed on properly using(var printer = new ReliancePrinter()) { // Get the status! var status = printer.GetStatus(); // Print the summary in a block of text Console.WriteLine(\"Printer status:\\n{0}\", status); // We can also get more specific details var jammed = status.PrinterErrors.HasFlag(ErrorStatuses.Jammed); Console.WriteLine(\"Printer Jammed? :{0}\", jammed); var lidOpen = status.PrinterErrors.HasFlag(ErrorStatuses.PlatenOpen); Console.WriteLine(\"Lid Open? :{0}\", lidOpen); var hasPaper = status.SensorStatus.HasFlag(SensorStatuses.Path); Console.WriteLine(\"Has Paper? :{0}\", hasPaper); } } } } Warning Exceptions For clarity, exception handling has been elided. It is advisable to wrap any ReliancePrinter method calls in a try/catch block for PTIException ."
  },
  "tutorials/intro.html": {
    "href": "tutorials/intro.html",
    "title": "Getting Started",
    "keywords": "Getting Started Install .NET Core SDK for your operating system Open your favorite terminal Execute dotnet new console -o reliance_sample cd reliance_sample dotnet add package PTIRelianceLib Open Program.cs in your favorite editor and replace the code with the following: using System; using PTIRelianceLib; namespace reliance_sample { class Program { static void Main(string[] args) { using(var printer = new ReliancePrinter()) { var rev = printer.GetFirmwareRevision(); Console.WriteLine(\"Firmware revision: {0}\", rev); } } } } Important Linux users, please make sure libusb is installed before proceeding Execute dotnet run Results"
  },
  "tutorials/flash_update.html": {
    "href": "tutorials/flash_update.html",
    "title": "Firmware Flash Updates",
    "keywords": "Firmware Flash Updates This library is designed promote natural use of good design practices. One of the most important patterns you will see in the samples, tests, and the core library itself is extensive using of the using pattern. Following this design will prevent common causes of memory leaks while making your code easier to maintain. Code that is easy maintain gives you more time to focus on the features that bring value to your product. Code Sample using System; using PTIRelianceLib; namespace reliance_sample { class Program { static void Main(string[] args) { // Load a firmware file someplace on disk var file = BinaryFile.From(\"reliance_1.27.171.ptix\"); // Make sure that file loaded okay if (file.Empty) { Console.WriteLine(\"Firmware file cannot be read. Does it exist?\"); } else { // You could also use a DevNullMonitor if you want to ignore output entirely var monitor = new ProgressMonitor(); monitor.OnFlashMessage += (s, o) => Console.WriteLine(\"\\n{0}\", o.Message); // Simple progress monitor monitor.OnFlashProgressUpdated += (s, o) => { Console.CursorLeft = 0; Console.CursorVisible = false; Console.Write(\"{0:0.00}%\", o.Progress*100); }; // Wrap our printer in using so it gets disposed on properly using(var printer = new ReliancePrinter()) { // Do the update! var result = printer.FlashUpdateTarget(file, monitor); Console.WriteLine(\"\\nFlash Update Result: {0}\", result); } } } } } Warning Exceptions For clarity, exception handling has been elided. It is advisable to wrap any ReliancePrinter method calls in a try/catch block for PTIException ."
  },
  "tutorials/exceptions.html": {
    "href": "tutorials/exceptions.html",
    "title": "Exceptions",
    "keywords": "Warning Exceptions For clarity, exception handling has been elided. It is advisable to wrap any ReliancePrinter method calls in a try/catch block for PTIException ."
  },
  "index.html": {
    "href": "index.html",
    "title": "PTI.Reliance.Tools",
    "keywords": "PTI.Reliance.Tools A cross-platform .NET Core 2.0 API for updating and maintaining your Reliance Thermal printer. Source code available on Github Quick Start Check out the tutorials to get started quickly. Deep Dive For details on the core library, see PTIRelianceLib"
  },
  "tutorials/configuration.html": {
    "href": "tutorials/configuration.html",
    "title": "Device Configuration",
    "keywords": "Device Configuration Configuration can be managed through this API with use of Reliance RFG configuration files. The workflow for generating this files is to use Reliance Tools for PC to configure your printer to your desired settings. When ready, click File->Save Config and select where to save your file. The file will have the RFG file extension. Getting a Config Code Once you have an RFG file, you have a few options for getting it into your application. The most straightforward method is to use From . Code Sample using System; using PTIRelianceLib; namespace reliance_sample { class Program { static void Main(string[] args) { // Load a firmware file someplace on disk var file = BinaryFile.From(\"my_config.rfg\"); // Make sure that file loaded okay if (file.Empty) { Console.WriteLine(\"Configuration file cannot be read. Does it exist?\"); } else { // Wrap our printer in using so it gets disposed on properly using(var printer = new ReliancePrinter()) { // Do the config! var result = printer.SendConfiguration(file); Console.WriteLine(\"\\nConfiguration Update Result: {0}\", result); } } } } } Warning Exceptions For clarity, exception handling has been elided. It is advisable to wrap any ReliancePrinter method calls in a try/catch block for PTIException ."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Reliance Thermal Printer API",
    "keywords": "Reliance Thermal Printer API This library was designed so that the majority of your tasks can be completed with a single using statement We recommend that your create your ReliancePrinter on as as-needed basis. That means we do not recommend keeping your printer as a field or property inside your class. public class MyApplication { // Don't do this!! private IPyramidDevice _mPrinter; // Or this!! public ReliancePrinter Printer { get; private set;} // But do this public void DoPrinterThings(MyData data) { // Printer is automatically discovered and connected using(var printer = new ReliancePrinter() { var stuff = data.GetStuff(); ... // Proceed to work with printer } } } You can also do some cool things with the data types we provide such as Status and Revlev . They are automatically disposable so you are free to bind to their properties without having to worry about memory leaks."
  },
  "api/PTIRelianceLib.Revlev.html": {
    "href": "api/PTIRelianceLib.Revlev.html",
    "title": "Class Revlev",
    "keywords": "Class Revlev Standard IPyramidDevice revision descriptor. A revision can be compared using fluent comparison operations such as Equals, Less Than, Greater Than, etc. Older firmware is considerd \"less than\" newer firmware using semantic versioning rules. 0.0.0 is an invalid firmware revision and is used as the default \"invalid\" revision. Inheritance System.Object Revlev Implements IEquatable < Revlev > Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public class Revlev : IComparable, IParseable, IEquatable<Revlev> Constructors | Improve this Doc View Source Revlev() Create a new Revlev object with default value of 0.0.0 . Declaration public Revlev() | Improve this Doc View Source Revlev(Int32, Int32, Int32) Explicitly construct a new revlev in proper order of maj . min . build . Only positive values will be stored. Declaration public Revlev(int maj, int min, int build) Parameters Type Name Description System.Int32 maj First part of revision System.Int32 min Middle part of revision System.Int32 build Last part of revision | Improve this Doc View Source Revlev(String) Build a new Revlev type by parsing revlev in the format X.X.XX . The minor and build fields may be omitted. In this case, the values will be set to 0. If a non-numeric or otheriwse invalid revlev is provided, an exception of type ArgumentException will be thrown. Declaration public Revlev(string revlev) Parameters Type Name Description System.String revlev String of conforming format X.X.XX Fields | Improve this Doc View Source Build Third component of version Major.Minor.Build Declaration public readonly int Build Field Value Type Description System.Int32 Build component of revision | Improve this Doc View Source Major First component of version Major.Minor.Build Declaration public readonly int Major Field Value Type Description System.Int32 Major component of revision | Improve this Doc View Source Minor Second component of version Major.Minor.Build Declaration public readonly int Minor Field Value Type Description System.Int32 Minor component of revision Methods | Improve this Doc View Source CompareTo(Object) Compares this Revlev to another object obj Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj Object to compare Returns Type Description System.Int32 < 0 if this < obj 0 if this == obj > 0 if this > obj | Improve this Doc View Source Equals(Revlev) Compares this to another Revlev . Declaration public bool Equals(Revlev other) Parameters Type Name Description Revlev other Object to compare to Returns Type Description System.Boolean True if equal | Improve this Doc View Source Equals(Object) Compares this to another Object . Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Object to compare to Returns Type Description System.Boolean True if equal | Improve this Doc View Source GetHashCode() Returns hashcode for this revision Declaration public override int GetHashCode() Returns Type Description System.Int32 Integer hashcode | Improve this Doc View Source Serialize() Declaration public byte[] Serialize() Returns Type Description System.Byte [] Payload data | Improve this Doc View Source ToString() Returns this object in the format X.X.XX If the device is not conneted, the string \"Not Connected\" will instead be returned. Declaration public override string ToString() Returns Type Description System.String string formatted as X.X.XX or \"Not Connected\" Operators | Improve this Doc View Source Equality(Revlev, Revlev) Returns true if r1 is == r2 Declaration public static bool operator ==(Revlev r1, Revlev r2) Parameters Type Name Description Revlev r1 Left hand side Revlev r2 Right hand side Returns Type Description System.Boolean bool | Improve this Doc View Source GreaterThan(Revlev, Revlev) Returns true if r1 is > r2 Declaration public static bool operator>(Revlev r1, Revlev r2) Parameters Type Name Description Revlev r1 Left hand side Revlev r2 Right hand side Returns Type Description System.Boolean bool | Improve this Doc View Source GreaterThanOrEqual(Revlev, Revlev) Returns true if r1 is >= r2 Declaration public static bool operator >=(Revlev r1, Revlev r2) Parameters Type Name Description Revlev r1 Left hand side Revlev r2 Right hand side Returns Type Description System.Boolean bool | Improve this Doc View Source Inequality(Revlev, Revlev) Returns true if r1 is != r2 Declaration public static bool operator !=(Revlev r1, Revlev r2) Parameters Type Name Description Revlev r1 Left hand side Revlev r2 Right hand side Returns Type Description System.Boolean bool | Improve this Doc View Source LessThan(Revlev, Revlev) Returns true if r1 is < r2 Declaration public static bool operator <(Revlev r1, Revlev r2) Parameters Type Name Description Revlev r1 Left hand side Revlev r2 Right hand side Returns Type Description System.Boolean bool | Improve this Doc View Source LessThanOrEqual(Revlev, Revlev) Returns true if r1 is <= r2 Declaration public static bool operator <=(Revlev r1, Revlev r2) Parameters Type Name Description Revlev r1 Left hand side Revlev r2 Right hand side Returns Type Description System.Boolean bool Implements IEquatable<>"
  },
  "api/PTIRelianceLib.Status.html": {
    "href": "api/PTIRelianceLib.Status.html",
    "title": "Class Status",
    "keywords": "Class Status Printer status data include metrics about temperature sensors, and paper movement. TEST ... var status = printer. GetStatus() ; Console.WriteLine(\"Printer is: {0}\", status.TicketStatus); Console.WriteLine(\"Printer Errors: {0}\", status.PrinterErrors); ... Inheritance System.Object Status Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public class Status : object, IParseable Properties | Improve this Doc View Source ArmRaw Raw ADC value for arm sensor Declaration public ushort ArmRaw { get; } Property Value Type Description System.UInt16 Raw ADC value for arm paper sensor | Improve this Doc View Source HeadTemp Temperature of the head in deg C Declaration public byte HeadTemp { get; } Property Value Type Description System.Byte Head temperature in degrees Celsius | Improve this Doc View Source HeadVoltage ASCII string of the head input voltage. \"XX.XX\" (Volts) Declaration public string HeadVoltage { get; } Property Value Type Description System.String Head voltage in DC volts | Improve this Doc View Source NotchRaw Raw ADC value for notch sensor Declaration public ushort NotchRaw { get; } Property Value Type Description System.UInt16 Raw ADC value for notch sensor | Improve this Doc View Source PaperRaw Raw ADC value for paper sensor Declaration public ushort PaperRaw { get; } Property Value Type Description System.UInt16 Raw ADC value for paper sensor | Improve this Doc View Source PathRaw Raw ADC value for path sensor Declaration public ushort PathRaw { get; } Property Value Type Description System.UInt16 Raw ADC value for path sensor | Improve this Doc View Source PresenterRaw Raw ADC value for presenter sensor Declaration public ushort PresenterRaw { get; } Property Value Type Description System.UInt16 Raw ADC value for presenter sensor | Improve this Doc View Source PrinterErrors Printer error status Declaration public ErrorStatuses PrinterErrors { get; } Property Value Type Description ErrorStatuses Zero or more errors may be set at once | Improve this Doc View Source SensorStatus Sensor statuses Declaration public SensorStatuses SensorStatus { get; } Property Value Type Description SensorStatuses Covered or Uncovered sensor flags | Improve this Doc View Source TicketStatus Where the ticket is at. 0 : Idle = no ticket 1 : Printing = Ticket has data 2 : Un-presented Ticket = Ticket is cut but not presented 3 : Presented Ticket = Ticket is cut and presented Declaration public TicketStates TicketStatus { get; } Property Value Type Description TicketStates Ticket be in exactly one state Methods | Improve this Doc View Source Serialize() Declaration public byte[] Serialize() Returns Type Description System.Byte [] Payload data | Improve this Doc View Source ToString() Returns a summary of the status report a. la Declaration public override string ToString() Returns Type Description System.String string Examples Head Voltage: 24 V DC Head Temperate: 22 °C Sensor Status: Platen ..."
  },
  "api/PTIRelianceLib.ReliancePrinter.html": {
    "href": "api/PTIRelianceLib.ReliancePrinter.html",
    "title": "Class ReliancePrinter",
    "keywords": "Class ReliancePrinter Reliance Thermal Printer class provides access access to flash updating, configuration, status reporting, and other commands. For best results, we recommend testing against the latest available firmware for Reliance. Use Reliance Tools for PC to update your printer to the latest firmware through the auto update feature. You may also contact our support team to get the latest firmware file at mailto:support@pyramidacceptors.com Reliance Tools for PC https://pyramidacceptors.com/app/reliance-tools/ Inheritance System.Object ReliancePrinter Implements IPyramidDevice IDisposable Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public class ReliancePrinter : object, IPyramidDevice, IDisposable Constructors | Improve this Doc View Source ReliancePrinter() Create a new Reliance Printer. The printer will be discovered automatically. If HIDapi or one of its depencies cannot be found or loaded, PTIException will be thrown. Declaration public ReliancePrinter() Exceptions Type Condition PTIException Thrown if native HID library cannot be loaded Fields | Improve this Doc View Source ProductId USB product id for all Reliance USB interfaces Declaration public const int ProductId = null Field Value Type Description System.Int32 USB PID | Improve this Doc View Source VendorId USB vendor id for all Reliance USB interfaces Declaration public const int VendorId = null Field Value Type Description System.Int32 USB VID Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source FlashUpdateTarget(BinaryFile, ProgressMonitor) Install the specified firmware BinaryFile on this device. With few exceptions, most any firmware can be installed using this method. The reporter ProgressMonitor provides callbacks for messages, progress, and errors. Declaration public ReturnCodes FlashUpdateTarget(BinaryFile firmware, ProgressMonitor reporter = null) Parameters Type Name Description BinaryFile firmware Firmware image data ProgressMonitor reporter Progress callback instance Returns Type Description ReturnCodes Okay when update is successful FlashInstalledFwNotSupported if your printer has too old of firmware. Another ReturnCodes if update fails Remarks Updates target Reliance Thermal printer with this firmware. This API supports printers with firmware 1.22 or newer. If you have a printer firmware older than 1.22 , you must use the PC version of Reliance Tools to upgrade your firmware. | Improve this Doc View Source GetFirmwareRevision() Returns the firmware Revlev of this device. If there is an error reading the firmware revision, a Revlev of 0.0.0 will instead be returned. Declaration public Revlev GetFirmwareRevision() Returns Type Description Revlev Revision | Improve this Doc View Source GetInstalledCodepages() Returns a list of installed codepages. This is a list of codepage ids that are installed on the target printer. Only codepages that are installed may be selected for usage. Declaration public IEnumerable<ushort> GetInstalledCodepages() Returns Type Description IEnumerable < System.UInt16 > IEnumerable of ushort codepage IDs Empty IEnumerable of ushort on error | Improve this Doc View Source GetSerialNumber() Returns the serial number for this device Declaration public string GetSerialNumber() Returns Type Description System.String 9-digit serial number string when successful An empty string on failure | Improve this Doc View Source GetStatus() Returns the Status for the attached printer. If there is no device connected, null will be returned. Declaration public Status GetStatus() Returns Type Description Status Status object or null if no connection or error | Improve this Doc View Source Ping() For printers, all comms are halted while printing (with special exception for ESC/POS realtime status). If Ping() is called during a print, this will block for a small period of time and then return unsuccessfully. The resulting ReturnCode will be ExecutionFailure . It is recommended to try this method multiple times before assuming the printer is offline. Declaration public ReturnCodes Ping() Returns Type Description ReturnCodes Okay when device is online and ready ExecutionFailure if device is offline or busy | Improve this Doc View Source ReadConfiguration() Reads current configuration from this device and returns result as a JSON BinaryFile If there is an error reading the configuration, an empty BinaryFile is returned. You can check for an empty result via Empty . A configuration is a JSON formatted file that contains settings like baud rate, paper width, and print quality. Declaration public BinaryFile ReadConfiguration() Returns Type Description BinaryFile BinaryFile | Improve this Doc View Source Reboot() For printers, a reboot (and any power up event) will generate a start up ticket that calibrates the paper path. Rebooting the printer remotely will cause a paper feed and leave this ticket at the front bezel. If you have auto-retract enabled, the ticket will be get pulled back into the kiosk for disposal after a period of time. An exception of type PTIException may be raised if there is an error during reboot. Declaration public ReturnCodes Reboot() Returns Type Description ReturnCodes Okay when update is successful Other ReturnCodes if update fails Exceptions Type Condition PTIException Raised if there is an unrecoverable issue during the reboot operation. This usually means that the USB port entered an unexpected state. If this happens, dispose of this ReliancePrinter (e.g. dispose) and then try again. | Improve this Doc View Source SendConfiguration(BinaryFile) Parses config from BinaryFile and sends to target printer. PTIException is thrown if config file cannot be parsed Declaration public ReturnCodes SendConfiguration(BinaryFile config) Parameters Type Name Description BinaryFile config Configuration to send Returns Type Description ReturnCodes Okay when configuration is successful Other ReturnCodes if configuration fails Exceptions Type Condition PTIException Thrown if config file cannot be parsed Implements IPyramidDevice IDisposable"
  },
  "api/PTIRelianceLib.ProgressMonitor.html": {
    "href": "api/PTIRelianceLib.ProgressMonitor.html",
    "title": "Class ProgressMonitor",
    "keywords": "Class ProgressMonitor An event container class specialized for flash update workers. Inheritance System.Object ProgressMonitor DevNullMonitor Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public class ProgressMonitor : object, IProgressMonitor Methods | Improve this Doc View Source ReportFailure(String, Object[]) Declaration public virtual void ReportFailure(string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args | Improve this Doc View Source ReportMessage(String, Object[]) Declaration public virtual void ReportMessage(string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args | Improve this Doc View Source ReportProgress(Double) Declaration public virtual void ReportProgress(double progress) Parameters Type Name Description System.Double progress Events | Improve this Doc View Source OnFlashMessage Raised when a message is generated by the controller for the listener Declaration public event EventHandler<FlashEventMessageArgs> OnFlashMessage Event Type Type Description EventHandler < FlashEventMessageArgs > Contains information about non-critical messages | Improve this Doc View Source OnFlashProgressUpdated Raised when a unit of progress has been made. Called a cummulative total where units' sum equals 100. Declaration public event EventHandler<FlashProgressEventArgs> OnFlashProgressUpdated Event Type Type Description EventHandler < FlashProgressEventArgs > Contains information about current flash update progress"
  },
  "api/PTIRelianceLib.Library.html": {
    "href": "api/PTIRelianceLib.Library.html",
    "title": "Class Library",
    "keywords": "Class Library Contains library metadata and configurables Inheritance System.Object Library Namespace : PTIRelianceLib Assembly : PTIRelianceLib.dll Syntax public static class Library : object Fields | Improve this Doc View Source Options Gets or Sets Library options for this duration of your application. It is recommended to set this field only once, at the start of your application. Altering this property or the contents of this property during runtime may result in undefined behavior. Declaration public static LibraryOptions Options Field Value Type Description LibraryOptions Properties | Improve this Doc View Source Version Returns the assembly file version of this library Declaration public static string Version { get; } Property Value Type Description System.String Assembly version string"
  }
}